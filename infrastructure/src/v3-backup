import express from 'express'
import fetch from 'node-fetch'
import cors from 'cors'
import pino from 'pino'

const app = express()
const log = pino()
app.use(cors())
app.use(express.json({ limit: '2mb' }))

const UPSTREAM = process.env.VLLM_URL || 'http://ollama.ai.svc.cluster.local:11434/v1'
const MODEL = process.env.MODEL || 'llama3.1:8b-instruct-q5_K_M'
const SYSTEM_PROMPT = process.env.SYSTEM_PROMPT || 'You are Datavalleyâ€™s AI Interviewer.'
const MAX_TOKENS = parseInt(process.env.MAX_TOKENS || '512', 10)
const TIMEOUT_MS = parseInt(process.env.TIMEOUT_MS || '30000', 10)
const INTERNAL_KEY = process.env.INTERNAL_KEY || ''

app.use((req, res, next) => {
  const auth = req.header('authorization') || ''
  if (!INTERNAL_KEY || auth === `Bearer ${INTERNAL_KEY}`) return next()
  res.status(401).json({ error: 'Unauthorized' })
})

app.get('/healthz', (_, res) => res.send('ok-v3-1'))

app.post('/v1/chat/completions', async (req, res) => {
  try {
    const { messages = [], temperature = 0.7, top_p = 0.9, stream = false } = req.body || {}
    const enriched = [
      { role: 'system', content: SYSTEM_PROMPT },
      ...messages,
      { role: 'system', content: `Time now: ${new Date().toISOString()}` }
    ]
    const body = { model: MODEL, messages: enriched, temperature, top_p, max_tokens: MAX_TOKENS, stream }

    const ctrl = new AbortController()
    const id = setTimeout(() => ctrl.abort(), TIMEOUT_MS)

    const r = await fetch(`${UPSTREAM}/chat/completions`, {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify(body),
      signal: ctrl.signal
    })
    clearTimeout(id)

    if (!r.ok) return res.status(502).json({ error: 'Upstream error', detail: await r.text() })
    res.setHeader('content-type', 'application/json')
    return res.status(200).send(await r.text())
  } catch (e) {
    log.error(e)
    return res.status(500).json({ error: 'Wrapper failure', detail: String(e) })
  }
})

const port = process.env.PORT || 3000
app.listen(port, () => log.info({ port }, 'Wrapper up'))
